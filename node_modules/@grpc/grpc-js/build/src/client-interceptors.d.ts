import { Metadata } from './metadata';
import { Call, Listener, MetadataListener, MessageListener, StatusListener, InterceptingListener, WriteObject, WriteCallback } from './call-stream';
import { Status } from './constants';
import { Channel } from './channel';
import { CallOptions } from './client';
import { CallCredentials } from './call-credentials';
import { ClientMethodDefinition } from './make-client';
export declare class InterceptorConfigurationError extends Error {
    constructor(message: string);
}
export interface MetadataRequester {
    (metadata: Metadata, listener: InterceptingListener, next: (metadata: Metadata, listener: InterceptingListener | Listener) => void): void;
}
export interface MessageRequester {
    (message: any, next: (message: any) => void): void;
}
export interface CloseRequester {
    (next: () => void): void;
}
export interface CancelRequester {
    (next: () => void): void;
}
export interface FullRequester {
    start: MetadataRequester;
    sendMessage: MessageRequester;
    halfClose: CloseRequester;
    cancel: CancelRequester;
}
export declare type Requester = Partial<FullRequester>;
export declare class ListenerBuilder {
    private metadata;
    private message;
    private status;
    withOnReceiveMetadata(onReceiveMetadata: MetadataListener): this;
    withOnReceiveMessage(onReceiveMessage: MessageListener): this;
    withOnReceiveStatus(onReceiveStatus: StatusListener): this;
    build(): Listener;
}
export declare class RequesterBuilder {
    private start;
    private message;
    private halfClose;
    private cancel;
    withStart(start: MetadataRequester): this;
    withSendMessage(sendMessage: MessageRequester): this;
    withHalfClose(halfClose: CloseRequester): this;
    withCancel(cancel: CancelRequester): this;
    build(): Requester;
}
export interface InterceptorOptions extends CallOptions {
    method_definition: ClientMethodDefinition<any, any>;
}
export declare class InterceptingCall implements Call {
    private nextCall;
    private requester;
    constructor(nextCall: Call, requester?: Requester);
    cancelWithStatus(status: Status, details: string): void;
    getPeer(): string;
    start(metadata: Metadata, interceptingListener: InterceptingListener): void;
    write(writeObj: WriteObject, callback: WriteCallback): void;
    startRead(): void;
    halfClose(): void;
    getDeadline(): number | Date;
    getCredentials(): CallCredentials;
    setCredentials(credentials: CallCredentials): void;
    getMethod(): string;
    getHost(): string;
}
export interface NextCall {
    (options: InterceptorOptions): Call;
}
export interface Interceptor {
    (options: InterceptorOptions, nextCall: NextCall): InterceptingCall;
}
export interface InterceptorProvider {
    (methodDefinition: ClientMethodDefinition<any, any>): Interceptor;
}
export interface InterceptorArguments {
    clientInterceptors: Interceptor[];
    clientInterceptorProviders: InterceptorProvider[];
    callInterceptors: Interceptor[];
    callInterceptorProviders: InterceptorProvider[];
}
export declare function getInterceptingCall(interceptorArgs: InterceptorArguments, methodDefinition: ClientMethodDefinition<any, any>, options: CallOptions, channel: Channel): Call;
